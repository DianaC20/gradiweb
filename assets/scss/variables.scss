$w-100: 100%;
$primary-color: #772bf2;
$secundary-color: #000;
$text-color: #fff;
$padding-base: 0.625rem;
$padding: 0.938rem;
$padding-1: 1.25rem;
$nav-gap: 1rem;
$font-size-base: 1rem;
$font-size-1: 0.875rem;
$font-size-small: 0.625rem;
$font-weight-b: bold;
$text-end: end;
$text-start: start;
$text-center: center;


@mixin padding($prefix, $properties...) {
    @for $i from 1 through 5 {
        .#{$prefix}-#{$i} {
            @each $property in $properties {
                #{$property}: #{0.5 * $i}rem; 
            }
        }
    }
}

@include padding('p', 'padding');

@include padding('pt', 'padding-top');
@include padding('pr', 'padding-right');
@include padding('pb', 'padding-bottom');
@include padding('pl', 'padding-left');

@include padding('px', 'padding-left', 'padding-right');
@include padding('py', 'padding-top', 'padding-bottom');

@mixin generate-margin($prefix, $properties...) {
    @for $i from 1 through 5 {
        .#{$prefix}-#{$i} {
            @each $property in $properties {
                #{$property}: #{0.5 * $i}rem; 
            }
        }
    }
}

@include generate-margin('m', 'margin');

@include generate-margin('mt', 'margin-top');
@include generate-margin('mr', 'margin-right');
@include generate-margin('mb', 'margin-bottom');
@include generate-margin('ml', 'margin-left');

@include generate-margin('mx', 'margin-left', 'margin-right');
@include generate-margin('my', 'margin-top', 'margin-bottom');

.mx-auto {
    margin-left: auto;
    margin-right: auto;
}

@mixin flex-center {
    display: flex;
    align-items: center;
}

@mixin gradient-border($start, $end) {
    background: linear-gradient(to right, $start, $end);
}

@mixin animation($name, $duration, $timing: linear, $iteration: infinite) {
    animation: $name $duration $timing $iteration;
}
// Definición de breakpoints
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

// Mixin para generar media queries
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error "Breakpoint '#{$breakpoint}' no está definido.";
  }
}

// Clases base
.d-none {
  display: none !important;
}

.d-block {
  display: block !important;
}


// Generación dinámica de clases
@each $breakpoint in map-keys($breakpoints) {
  // Ocultar en un breakpoint específico
  .d-#{$breakpoint}-none {
    @include respond-to($breakpoint) {
      display: none !important;
    }
  }

  // Mostrar en un breakpoint específico
  .d-#{$breakpoint}-block {
    @include respond-to($breakpoint) {
      display: block !important;
    }
  }
}

// Combinaciones específicas
.d-none.d-lg-block {
  display: none !important;

  @include respond-to(lg) {
    display: block !important;
  }
}